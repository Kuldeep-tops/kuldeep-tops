1. What is a stored procedure in SQL, and how does it differ from a standard SQL query?

A stored procedure is a precompiled collection of one or more SQL statements that are stored together in the database and can be executed as a single unit. 
It is essentially a set of SQL queries and commands that can be invoked by a name from the database.

 Stored procedures are precompiled, meaning they are parsed and optimized by the database when they are created, not each time they are executed. 
 This can improve performance because the database doesnâ€™t need to re-parse and optimize the SQL each time.

 Once created, stored procedures can be reused multiple times by calling them with a simple command, which promotes reusability and maintainability.

 They encapsulate complex business logic, allowing it to be executed in the database rather than having it scattered across multiple application code files. 
 This centralizes the logic and makes it easier to maintain.

 Stored procedures can accept input parameters, and they can return output parameters or result sets. This makes them flexible for a variety of use cases.

 Stored procedures can contain error-handling mechanisms using constructs like TRY-CATCH in SQL Server or EXCEPTION in PL/SQL (Oracle),
  which helps manage errors more efficiently.

 Stored procedures can handle transaction management by using COMMIT, ROLLBACK, and SAVEPOINT commands. 
 This allows for better control over data consistency and integrity.

2. Explain the advantages of using stored procedures.

Advantages of Using Stored Procedures in SQL
Stored procedures offer several benefits over standard SQL queries and are a key component of many database systems.

 Stored procedures are precompiled and stored in the database.
 When they are first created, the SQL statements inside are parsed and optimized by the database engine.
 Stored procedures can reduce the amount of data transferred between the client and server. 
 Once a stored procedure is created, it can be reused multiple times by different applications or parts of the same application.
 If the business logic in a stored procedure needs to change, the modification only needs to be made in the stored procedure itself,
 rather than in every place where the SQL logic is repeated.
 Stored procedures allow access control over the database by granting permissions on the procedure rather than directly on the tables.
 Stored procedures can hide the complexity of the underlying database schema from users and applications.
 Stored procedures can handle transaction control (e.g., using COMMIT, ROLLBACK, and SAVEPOINT) within the procedure.
 This ensures that a group of related SQL statements is treated as a single unit of work, maintaining data consistency even in the event of an error.
