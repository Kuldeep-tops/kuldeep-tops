1. What are constraints in SQL? List and explain the different types of constraints

Constraints in SQL are rules or restrictions that are applied to columns in a database table to ensure the integrity, 
accuracy, and reliability of the data. These constraints help in defining the type of data that can be stored in a table, 
how it relates to other data, and how it behaves when changes are made to the data. Constraints can be applied at the column level (to a specific column)
 or table level (across multiple columns).
Common Types of SQL Constraints
NOT NULL Constraint
Ensures that a column cannot have a NULL value. It forces the user to provide a value for this column when inserting or updating records.
PRIMARY KEY Constraint
Uniquely identifies each record in a table. A primary key column cannot have NULL values, and it must contain unique values.
FOREIGN KEY Constraint
Ensures referential integrity by linking a column in the current table (called the child table) to a column in another table (called the parent table).
UNIQUE Constraint
Ensures that all values in a column (or a combination of columns) are unique, meaning no two rows can have the same value for that column.
CHECK Constraint
Ensures that the values in a column meet a specific condition. The CHECK constraint allows for custom validation rules.
DEFAULT Constraint
Specifies a default value for a column when no value is provided during an INSERT operation.
INDEX Constraint
While not technically a constraint in the strictest sense, indexes are used to improve the speed of retrieval operations on a table. 

2. How do PRIMARY KEY and FOREIGN KEY constraints differ?

The PRIMARY KEY and FOREIGN KEY constraints are both used to maintain data integrity in relational databases, 
but they serve different purposes and have distinct characteristics. 
1. PRIMARY KEY
A PRIMARY KEY is used to uniquely identify each record in a table. It ensures that each row in the table is unique and not duplicated.
A PRIMARY KEY column must contain unique values (no duplicates).
A PRIMARY KEY column cannot contain NULL values; every row must have a value in the primary key column(s).
A table can have only one PRIMARY KEY, but the primary key can consist of one or more columns (this is called a composite primary key).
2. FOREIGN KEY
A FOREIGN KEY is used to establish and enforce a link between the data in two tables.
It ensures referential integrity, meaning that the values in a foreign key column must match values in a primary key or a unique column in another table.
A FOREIGN KEY column may contain duplicate values (it does not need to be unique).
A FOREIGN KEY column can contain NULL values, representing the absence of a relationship (depending on whether the relationship allows NULL).
A table can have multiple FOREIGN KEY constraints that reference different primary keys (or unique keys) from other tables.

3. What is the role of NOT NULL and UNIQUE constraints?

The NOT NULL and UNIQUE constraints are both used in SQL to enforce data integrity, but they serve different purposes.
1. NOT NULL Constraint
The NOT NULL constraint ensures that a column cannot have a NULL value. In other words, it forces the user to
 provide a valid (non-null) value when inserting or updating a record in the table.
It is used when a column's data is required for every record, meaning it cannot be left empty. 
This constraint is often applied to fields that are critical to the business logic or operations, such as names, dates, or IDs.
2. UNIQUE Constraint
The UNIQUE constraint ensures that all the values in a column (or a combination of columns) are unique across the entire table. 
No two rows can have the same value for that column (or group of columns if the UNIQUE constraint is defined on multiple columns).