1. What is a view in SQL, and how is it different from a table?

A view in SQL is a virtual table that represents the result of a query. It is essentially a stored SELECT statement that you can reference like a 
table, but unlike a table, it does not store data itself. Instead, a view dynamically fetches data from the underlying tables each time it is accessed.
A table is a physical structure in a database that stores actual data.
A view does not store data. It is a saved query that gets executed whenever the view is accessed.
A table has a permanent, defined schema with columns and data types.
A view is based on a query and can display data from one or more tables or even other views. Its schema depends on the result set of the query it encapsulates.
You can insert, update, delete, and modify data directly in a table.
You generally cannot insert, update, or delete data directly in a view (though there are exceptions if the view is simple and meets certain criteria). 
Instead, views are usually used for querying or simplifying complex operations.
Accessing data in a table is typically faster since the data is physically stored in the database.
A view can potentially slow down performance, as it is essentially a query that needs to be executed every time it is accessed.
 Complex views or those based on large tables may have more performance overhead.
Used for storing and organizing raw data in the database.
Used to simplify complex queries, abstract data access, provide a layer of security (by restricting access to certain columns or rows),
 or present data in a specific format.

2. Explain the advantages of using views in SQL databases.

Using views in SQL databases offers several advantages, which can improve data management, security, and ease of use. 
Views can encapsulate complex SQL queries, making it easier for users to access the data without needing to know the underlying table structures or 
how to write complex joins, aggregations, or filtering.
Views allow you to restrict access to sensitive data. For example, a view can display only specific columns or rows from a table,
such as hiding a column with personal information or restricting data to a specific region or department.
You can create views that limit access to certain parts of the data for different users, improving security by enforcing data visibility policies without
altering the underlying table structure.
If an employee table contains sensitive columns like salary, a view can exclude this column while allowing access to other non-sensitive columns like 
name and department.
Views provide a layer of abstraction between users and the physical database schema. This means that you can change the underlying table
structure (like adding or removing columns) without affecting the usersâ€™ access to data through views, as long as the view itself is not altered.
Benefit: Users can continue querying the same view even if the underlying tables are modified, reducing the impact of schema changes on application 
code or user queries.
 Once a view is defined, it can be reused across different parts of an application or by multiple users without having to write the same query repeatedly.
