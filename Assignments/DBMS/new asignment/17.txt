1.What are control structures in PL/SQL? Explain the IF-THEN and LOOP control structures

In PL/SQL, control structures are used to control the flow of execution within a PL/SQL block based on conditions or repetitive logic.
 These structures enable you to make decisions,
 iterate over a set of instructions, or control the sequence of operations within a program.
Conditional Control Structures (e.g., IF-THEN, CASE)
Iterative Control Structures (e.g., LOOP, FOR LOOP, WHILE LOOP)
1. IF-THEN Control Structure
IF <condition> THEN
    -- Statements to be executed if condition is true
END IF;
IF-THEN-ELSE Control Structure
IF <condition> THEN
    -- Statements to be executed if condition is true
ELSE
    -- Statements to be executed if condition is false
END IF;
3. IF-THEN-ELSIF-ELSE Control Structure
IF <condition1> THEN
    -- Statements if condition1 is true
ELSIF <condition2> THEN
    -- Statements if condition2 is true
ELSE
    -- Statements if neither condition1 nor condition2 is true
END IF;
4. LOOP Control Structure
LOOP
    -- Statements to be executed
END LOOP;
5. WHILE-LOOP Control Structure
WHILE <condition> LOOP
    -- Statements to be executed
END LOOP;
6. FOR-LOOP Control Structure
FOR <counter> IN <start_value>.. <end_value> LOOP
    -- Statements to be executed
END LOOP;

2. How do control structures in PL/SQL help in writing complex queries?

Control structures in PL/SQL are essential for writing complex queries and creating sophisticated logic inside PL/SQL blocks.
 While SQL itself is declarative and used for querying data from the database, PL/SQL (Procedural Language/SQL) extends SQL by allowing for procedural
 constructs, such as loops, conditionals, and exceptions. 
Making decisions based on query results (e.g., using IF-THEN to execute different logic depending on the data).
Iterating over sets of data (e.g., using loops to process multiple records returned by a query).
Handling errors and exceptions that might occur during query execution.
Optimizing complex queries by breaking them into smaller, manageable parts and controlling the flow based on conditions.
1. Conditionally Controlling the Flow of Queries (Using IF-THEN)
Control structures like IF-THEN allow you to execute different SQL queries based on conditions, which can simplify complex logic and enhance readability. 
2. Iterating Over Query Results (Using LOOP and CURSOR)
When dealing with multiple rows of data, control structures like loops allow you to iterate through each row and process it.
 You can fetch query results into a cursor and then use loops to process each row individually.
In this example, the FOR loop iterates over all employees fetched by the cursor and processes each employee one by one. 
This is useful for complex operations, such as updating records, performing calculations, or handling business logic for each row.
3. Complex Decision-Making (Using IF-THEN-ELSIF and CASE)
Complex queries often require decisions to be made based on the data. For example, you might need to evaluate multiple conditions to decide how to proceed.
 The IF-THEN-ELSIF and CASE structures enable you to write such logic easily, making it easier to handle different scenarios in one PL/SQL block.
4. Looping Through Multiple Queries (Using LOOP with Dynamic SQL)
In some cases, you may need to execute multiple SQL queries or dynamically build queries based on the result of previous queries.
 Using LOOP in conjunction with dynamic SQL (via EXECUTE IMMEDIATE), you can iterate through and execute multiple SQL statements dynamically.
5. Error Handling and Exception Management
PL/SQL control structures also include exception handling to catch and handle errors that may occur while executing complex queries. 
This is important when working with queries that might fail, such as queries involving joins or subqueries, or when working with data that may not always exist.
