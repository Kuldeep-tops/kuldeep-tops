1. Define the SQL Data Definition Language (DDL).

SQL Data Definition Language (DDL)
Data Definition Language (DDL) is a subset of SQL used for defining, modifying, and managing database objects such as tables, views, indexes, and schemas. DDL commands are used to describe the structure of the database and its components. These commands don't manipulate the data itself but rather define how data is stored in the database.

Key Characteristics of DDL:
DDL Commands are Permanent: Once executed, the changes made by DDL commands are permanent and cannot be rolled back unless explicitly handled by a transaction in some RDBMS (like using COMMIT and ROLLBACK).
Structure-Oriented: DDL primarily deals with the structure or schema of the database, not the actual data within it.
Common DDL Commands
CREATE:

The CREATE command is used to create new database objects such as tables, indexes, or views.
Example: Creating a new table:

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100)
);
ALTER:

The ALTER command is used to modify an existing database object, such as adding or deleting columns in a table, or changing the properties of the table.
Example: Adding a new column to an existing table:

ALTER TABLE students
ADD email VARCHAR(100);
DROP:

The DROP command is used to delete an existing database object, such as a table, index, or view. When you drop an object, all the data and structure related to it are permanently removed.
Example: Dropping a table:

DROP TABLE students;
TRUNCATE:

The TRUNCATE command is used to remove all rows from a table but preserve the table structure for future use. Unlike DELETE, TRUNCATE does not log individual row deletions and is typically faster.
Example: Truncating a table:

TRUNCATE TABLE students;
RENAME:

The RENAME command is used to change the name of an existing database object, such as a table or column.
Example: Renaming a table:

RENAME students TO pupils;

2. Explain the CREATE command and its syntax.

CREATE Command in SQL
The CREATE command in SQL is a Data Definition Language (DDL) command used to create new database objects such as tables, views, indexes, schemas, and databases themselves. It defines the structure and properties of these objects within the database. The CREATE command allows you to specify the types of data that can be stored, how it is stored, and the relationships between data entities.

Syntax of the CREATE Command
1. CREATE DATABASE (To create a new database)

CREATE DATABASE database_name;
database_name: The name of the database you want to create.
Example:


CREATE DATABASE school_db;
This command creates a database named school_db.

2. CREATE TABLE (To create a new table)
The most commonly used CREATE statement is for creating tables, which define how data will be organized in rows and columns.


CREATE TABLE table_name (
    column1 datatype [constraint],
    column2 datatype [constraint],
    ...
);
table_name: The name of the table.
column1, column2, ...: The names of the columns in the table.
datatype: The data type for each column (e.g., INT, VARCHAR, DATE, etc.).
constraint: Optional constraints that can be applied to columns (e.g., PRIMARY KEY, NOT NULL, UNIQUE, etc.).
Example:


CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL,
    age INT,
    class VARCHAR(50),
    address VARCHAR(200)
);
In this example:

A table named students is created with columns student_id, student_name, age, class, and address.
The student_id column is of type INT and is set as the Primary Key (ensuring that each student has a unique ID).
The student_name column is of type VARCHAR(100) and cannot be NULL.
3. CREATE VIEW (To create a new view)
A view is a virtual table based on the result set of a SQL query. It is a way to simplify complex queries or provide a security layer by showing only specific data.


CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;
view_name: The name of the view.
SELECT statement: The query used to generate the result set that the view represents.
Example:


CREATE VIEW student_summary AS
SELECT student_name, class, age
FROM students
WHERE age > 10;
This view student_summary shows the student_name, class, and age of students older than 10 years.

4. CREATE INDEX (To create an index)
An index is used to speed up the retrieval of rows from a database table by creating a data structure (usually a tree) that improves the speed of queries on the indexed columns.


CREATE INDEX index_name ON table_name (column_name);
index_name: The name of the index.
table_name: The name of the table on which the index is created.
column_name: The column(s) on which the index is created.
Example:


CREATE INDEX idx_student_name ON students (student_name);
This command creates an index named idx_student_name on the student_name column in the students table.

Example: Full CREATE Command for a Table
Let's go through an example of creating a table with constraints:


CREATE TABLE teachers (
    teacher_id INT PRIMARY KEY,           -- teacher_id as the primary key
    teacher_name VARCHAR(100) NOT NULL,   -- teacher_name cannot be NULL
    subject VARCHAR(100) NOT NULL,        -- subject cannot be NULL
    email VARCHAR(100) UNIQUE             -- email must be unique
);

3. What is the purpose of specifying data types and constraints during table creation?]

Purpose of Specifying Data Types and Constraints During Table Creation
When creating a table in a database, data types and constraints are specified to ensure data integrity, enforce business rules, optimize performance, and improve the overall structure of the database. Both data types and constraints play a crucial role in defining how data is stored, validated, and retrieved.

1. Purpose of Specifying Data Types
A data type defines the kind of data a column can hold. By specifying data types during table creation, you ensure that the data stored in each column is appropriate, consistent, and optimized for storage and retrieval. Here are the key purposes of data types:

a) Data Integrity
Data Types enforce correctness by restricting the type of data that can be inserted into a column. For example, you can define a column to store only integer values, floating-point numbers, or text.
Example: If you define a column as INT, it will only accept integer values and reject any text or non-numeric data.
Example:

CREATE TABLE students (
    student_id INT,           -- Ensures only integer values
    student_name VARCHAR(100) -- Ensures only string data with max 100 characters
);
b) Data Storage Efficiency
Different data types require different amounts of storage. By choosing the appropriate data type, you ensure efficient use of storage space. For example, using INT (4 bytes) instead of VARCHAR(255) (which could use more space) for a column that only stores small integers.
Example:

CREATE TABLE employees (
    salary DECIMAL(10,2) -- This ensures that only numbers with two decimal points are stored
);
c) Performance Optimization
Choosing appropriate data types can improve the performance of queries. For example, using DATE instead of VARCHAR for storing dates allows the database to handle date-based operations (e.g., comparisons, sorting) more efficiently.
Example:

CREATE TABLE orders (
    order_date DATE -- Using DATE type for efficient date-based queries
);
d) Validation of Data Consistency
Data types prevent invalid data from being stored in a column. For instance, defining a column as VARCHAR(50) ensures that only strings up to 50 characters in length can be inserted, and an INT column can only store integer values.
Example:

CREATE TABLE products (
    product_name VARCHAR(100),   -- Only up to 100 characters allowed
    quantity INT                 -- Only integer values are allowed
);
2. Purpose of Specifying Constraints
Constraints are used to define rules for the data in a table. Constraints help ensure that the data is accurate, consistent, and adheres to the business logic of the application. Here's why constraints are essential:

a) Enforcing Data Integrity
Constraints ensure that the data in the database meets certain conditions, preventing incorrect or inconsistent data from being inserted.
Examples:
NOT NULL: Ensures that a column must have a value (cannot be NULL).
CHECK: Ensures that a columnâ€™s value falls within a specific range.
UNIQUE: Ensures that all values in a column are distinct.
DEFAULT: Specifies a default value for a column if no value is provided.
Example:


CREATE TABLE students (
    student_id INT PRIMARY KEY,      -- Ensures each student has a unique ID
    student_name VARCHAR(100) NOT NULL, -- Ensures the name cannot be NULL
    age INT CHECK (age >= 18),       -- Ensures the age is at least 18
    email VARCHAR(100) UNIQUE        -- Ensures no two students have the same email
);
b) Ensuring Referential Integrity (Relationships between Tables)
Foreign Key constraints ensure that relationships between tables are valid. They enforce the rule that a record in one table must correspond to a valid record in another table.
For example, in a students table, you can have a teacher_id column that references the teacher_id in the teachers table. This ensures that each student is linked to a valid teacher.
Example:

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100),
    teacher_id INT,
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id) -- Ensures valid teacher assignment
);
c) Ensuring Uniqueness and Non-Duplication of Data
The PRIMARY KEY and UNIQUE constraints ensure that certain columns contain unique values. A PRIMARY KEY ensures the column(s) uniquely identify each record in the table, while a UNIQUE constraint ensures that all values in a column are unique, but allows for NULL values.
Example:

CREATE TABLE users (
    user_id INT PRIMARY KEY,   -- Ensures each user has a unique ID
    email VARCHAR(100) UNIQUE  -- Ensures that no two users have the same email address
);
d) Improving Data Validation and Consistency
CHECK constraints are used to enforce custom rules for the values in a column. For example, you can enforce that a salary must always be a positive number, or that an age must be between 18 and 100.
Example:

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    salary DECIMAL(10,2) CHECK (salary > 0), -- Ensures salary is greater than 0
    age INT CHECK (age >= 18 AND age <= 100)  -- Ensures age is between 18 and 100
);
