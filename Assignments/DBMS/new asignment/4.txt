1. Define the SQL Data Definition Language (DDL).

SQL Data Definition Language (DDL)
Data Definition Language (DDL) is a subset of SQL used for defining, modifying, and managing database objects such as tables,
views, indexes, and schemas. DDL commands are used to describe the structure of the database and its components. 
These commands don't manipulate the data itself but rather define how data is stored in the database.
Once executed, the changes made by DDL commands are permanent and cannot be rolled back unless explicitly handled by a transaction in some RDBMS (like using COMMIT and ROLLBACK).
DDL primarily deals with the structure or schema of the database, not the actual data within it.
ALTER:
The ALTER command is used to modify an existing database object, such as adding or deleting columns in a table, or changing the properties of the table.
DROP:
The DROP command is used to delete an existing database object, such as a table, index, or view.
When you drop an object, all the data and structure related to it are permanently removed.
The TRUNCATE command is used to remove all rows from a table but preserve the table structure for future use.
Unlike DELETE, TRUNCATE does not log individual row deletions and is typically faster.
RENAME:
The RENAME command is used to change the name of an existing database object, such as a table or column.

2. Explain the CREATE command and its syntax.

The CREATE command in SQL is a Data Definition Language (DDL) command used to create new database objects such as tables, views, indexes, schemas, and databases themselves. 
It defines the structure and properties of these objects within the database. The CREATE command allows you to specify the types of data 
that can be stored, how it is stored, and the relationships between data entities.
Syntax of the CREATE Command
1. CREATE DATABASE (To create a new database)
CREATE DATABASE database_name;
database_name: The name of the database you want to create.
2. CREATE TABLE (To create a new table)
The most commonly used CREATE statement is for creating tables, which define how data will be organized in rows and columns.
CREATE TABLE table_name (
    column1 datatype [constraint],
    column2 datatype [constraint],
    ...
);
3. What is the purpose of specifying data types and constraints during table creation?
Purpose of Specifying Data Types and Constraints During Table Creation
When creating a table in a database, data types and constraints are specified to ensure data integrity, 
enforce business rules, optimize performance, and improve the overall structure of the database. 
Both data types and constraints play a crucial role in defining how data is stored, validated, and retrieved.

1. Purpose of Specifying Data Types
A data type defines the kind of data a column can hold. By specifying data types during table creation, you ensure that the data stored in each column is appropriate, consistent, and optimized for storage and retrieval. Here are the key purposes of data types:

a) Data Integrity
Data Types enforce correctness by restricting the type of data that can be inserted into a column. For example, you can define a column to store only integer values, floating-point numbers, or text.

b) Data Storage Efficiency
Different data types require different amounts of storage. By choosing the appropriate data type, you ensure efficient use of storage space. For example, using INT (4 bytes) instead of VARCHAR(255) (which could use more space) for a column that only stores small integers.

c) Performance Optimization
Choosing appropriate data types can improve the performance of queries. For example, using DATE instead of VARCHAR for storing dates allows the database to handle date-based operations (e.g., comparisons, sorting) more efficiently.
d) Validation of Data Consistency
Data types prevent invalid data from being stored in a column. For instance, defining a column as VARCHAR(50) ensures that only strings up to 50 characters in length can be inserted, and an INT column can only store integer values.

2. Purpose of Specifying Constraints
Constraints are used to define rules for the data in a table. Constraints help ensure that the data is accurate, consistent, and adheres to the business logic of the application.
a) Enforcing Data Integrity
Constraints ensure that the data in the database meets certain conditions, preventing incorrect or inconsistent data from being inserted.
b) Ensuring Referential Integrity (Relationships between Tables)
Foreign Key constraints ensure that relationships between tables are valid. They enforce the rule that a record in one table must correspond to a valid record in another table.
For example, in a students table, you can have a teacher_id column that references the teacher_id in the teachers table. This ensures that each student is linked to a valid teacher.
c) Ensuring Uniqueness and Non-Duplication of Data
The PRIMARY KEY and UNIQUE constraints ensure that certain columns contain unique values. A PRIMARY KEY ensures the column(s) uniquely identify each record in the table, while a UNIQUE constraint ensures that all values in a column are unique, but allows for NULL values.

d) Improving Data Validation and Consistency
CHECK constraints are used to enforce custom rules for the values in a column. For example, you can enforce that a salary must always be a positive number, or that an age must be between 18 and 100.
